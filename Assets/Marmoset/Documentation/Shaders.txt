SHADER SOURCE GUIDE
================
All variations of Marmoset shaders are built in ShaderLab using a core set of Marmoset include files, written in Cg, and included with full source for reference and customization. They can be found in the Marmoset/Shader/ folder as:
MarmosetCore - Shader math and RGBM code

MarmosetInput.cginc - Material parameters and input structures for ShaderLab shaders

MarmosetDirect.cginc - Direct lighting function for ShaderLab. Omni, direct, and spot-light results are computed here.

MarmosetSurf.cginc - Surface Lighting function for ShaderLab. Image-based lighting and texture lookups are performed here.

MarmosetMobile.cginc - Additional #defines, rules, and restrictions shared by all mobile shaders.

The .shader files (Bumped Diffuse IBL.shader, etc) themselves don't contain any real math. They simply include these .cginc files and use #defines to configure them for the a desired feature set.


#DEFINE FEATURES
---
#define MARMO_HQ
High-quality mode adds extra vector normalization and more rigorous lighting math to a few places in the shader. Disabled on mobile.

#define MARMO_SKY_ROTATION
Rotates reflection and normal vectors by a sky transform matrix passed in by sky objects. This is performed in the fragment shader and is costly. Disabled on mobile.

#define MARMO_DIFFUSE_IBL
Enables a lookup into the diffuse image-based lighting cubemap.

#define MARMO_SPECULAR_IBL
Enables a lookup into the specular image-based lighting cubemap.

#define MARMO_DIFFUSE_DIRECT
Enables diffuse contributions from direct light sources such as point and directional lights.

#define MARMO_SPECULAR_DIRECT
Enables specular contributions from direct light sources such as point and directional lights.

#define MARMO_NORMALMAP
Adds a normal-mapping texture lookup and math to the fragment shader.

#define MARMO_MIP_GLOSS 
A SPECULAR_IBL feature that uses the specular sharpness material property to look into a specific mip level of the specular image-based lighting cubemap.
Note: Disable on hardware that does not support textureCubeLod texture lookups.

#define MARMO_GLOW
Adds a glow map texture lookup and math for self illuminating surfaces.

#define MARMO_PREMULT_ALPHA
Premultiplies OUT.Albedo.rgb by OUT.Alpha, to be used with a premultipled-alpha blending mode. This option does NOT premultiply the specular output, so the specular component of the surface is blended additively (See Simple Glass shader).


MULTI_COMPILE
---
There is one other preprocessor directive that must be present in all non-mobile shaders:
#pragma multi_compile MARMO_LINEAR MARMO_GAMMA

This tells the ShaderLab compiler to build two versions of every shader, one with #define MARMO_LINEAR and one with #define MARMO_GAMMA. In code, the Sky.cs script picks between the two depending on the project's color-space configuration. These #defines are used in several places to perform math and RGBM decoding in the proper color-space.


MOBILE
---
Mobile shaders are duplicates of the standard shader set with several optimizations and limitations based on Unity's own mobile shaders. The key differences are:
No sky rotation - This saves an expensive per-fragment matrix multiply
No mipmapped gloss - Part hardware restriction, part Unity bug, only the highest reflection mip level is used on mobile platforms.
Fewer calls to normalize - Corners are cut with vector math in various places.
One shadow-casting light - All other lights are done per vertex for significantly simpler fragment shaders.